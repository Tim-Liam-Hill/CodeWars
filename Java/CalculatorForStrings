import java.util.HashMap;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.math.BigDecimal;

public class Calculator {
  private static Map<String, Integer> precedenceMap; 
  static{
        precedenceMap= new HashMap<String, Integer>();
        precedenceMap.put("+", 4);
        precedenceMap.put("-", 4);
        precedenceMap.put("*", 3);
        precedenceMap.put("/", 3);
  }
  
  public static Double evaluate(String expression) {
  
    String [] arr = expression.replace(" ", "").split("((?<=[*/+-])|(?=[*/+-]))");
    arr = Calculator.handleNegativeAndPositiveNumbers(arr);
    String postFix = Calculator.toPostFix(arr);
    
    return Calculator.evaluatePostfixExpression(postFix);
  }
  
   private static Double evaluatePostfixExpression(String postfix)
  {
    String [] arr = postfix.split(" ");
    Stack<BigDecimal> stack = new Stack<BigDecimal>();
    
    for(int i=0; i<arr.length; ++i)
    {
      if(Calculator.isOperator(arr[i]))
      {
         BigDecimal arg1 = stack.pop();
         BigDecimal arg2 = stack.pop();
        
        switch(arr[i])
        {
            case "+": stack.push(arg2.add(arg1));
              break;
            case "-": stack.push(arg2.subtract(arg1));
              break;
            case "*": stack.push(arg2.multiply(arg1));
              break;
            case "/": stack.push(arg2.divide(arg1));
              break;
        }
      }
      else stack.push(new BigDecimal(arr[i]));
    }
    
     return stack.pop().doubleValue();
   }
  
  private static String [] handleNegativeAndPositiveNumbers(String [] arr)
  {
    
    for(int i=0; i<arr.length; ++i)
    {
       if(Calculator.isOperator(arr[i]))
       {
          if(i==0 || Calculator.isOperator(arr[i-1]))
          {
            arr[i +1] = arr[i] + arr[i + 1];
            arr[i] = "";
          }
       }
    }
    
    Vector<String> vec = new Vector<String>();
    
    for(int i=0; i<arr.length; ++i)
      if(arr[i] != "")
        vec.add(arr[i]);
     
    return vec.toArray(new String[vec.size()]);
  }
  
  private static String toPostFix(String [] arr)
  {
    Stack<String> ops = new Stack<String>();
    String output = "";
    
    for(int i=0; i<arr.length; ++i)
    {
      if(!Calculator.isOperator(arr[i]))
        output += arr[i] + " ";
      else
      {
        while(!ops.empty() && Calculator.isHigherPrecedence(ops.peek(), arr[i]))
          output += ops.pop() + " "; 
        ops.push(arr[i]);
      }
    }
    
    while(!ops.empty())
      output += ops.pop() + " ";
              
    return output;
  }
  
  private static boolean isOperator(String str)
  {
    return ("+-*/".indexOf(str) != -1); 
  }
  
  private static boolean isHigherPrecedence(String op1, String op2)
  {
    return precedenceMap.get(op1) <= precedenceMap.get(op2);
  }
  
 } 
